{"version":3,"sources":["App.js","index.js"],"names":["Ball","resetScore","viewport","useThree","useSphere","args","mass","position","ref","api","usePlane","rotation","Math","PI","height","onCollide","set","velocity","color","Wall","width","attach","opacity","Wall2","Ceiling","Paddle","useBox","useFrame","state","mouse","x","Enemy","setScore","props","App","startScore","useState","score","useScore","incrementScore","camera","fov","intensity","gravity","defaultContactMaterial","restitution","Html","prepend","distanceFactor","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d4db879.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Canvas, useFrame, useThree } from \"react-three-fiber\";\nimport { Physics, useSphere, useBox, usePlane } from \"@react-three/cannon\";\nimport { Html } from \"@react-three/drei\";\nimport \"./index.css\";\n\nconst Ball = ({ resetScore }) => {\n  const { viewport } = useThree();\n  const [ref, api] = useSphere(() => ({\n    args: 0.5,\n    mass: 0.1,\n    position: [0, 0, 0],\n  }));\n\n  usePlane(() => ({\n    rotation: [-Math.PI / 2, 0, 0],\n    position: [0, -viewport.height, 0],\n    onCollide: () => {\n      api.position.set(0, 0, 0);\n      api.velocity.set(0, 0, 0);\n      resetScore();\n    },\n  }));\n\n  return (\n    <mesh ref={ref}>\n      <sphereBufferGeometry args={[0.5, 32, 32]} />\n      <meshStandardMaterial color=\"white\" />\n    </mesh>\n  );\n};\n\nconst Wall = () => {\n  const { viewport } = useThree();\n  const [ref] = usePlane(() => ({\n    args: [1, viewport.height],\n    rotation: [0, -Math.PI / 2, 0],\n    position: [viewport.width / 2, 0, 0],\n  }));\n\n  return (\n    <mesh ref={ref}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, viewport.height + 2]} />\n      <meshPhongMaterial attach=\"material\" color=\"black\" opacity={0.5} />\n    </mesh>\n  );\n};\n\nconst Wall2 = () => {\n  const { viewport } = useThree();\n  const [ref] = usePlane(() => ({\n    args: [1, viewport.height],\n    rotation: [0, Math.PI / 2, 0],\n    position: [-viewport.width / 2, 0, 0],\n  }));\n\n  return (\n    <mesh ref={ref}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 60]} />\n      <meshPhongMaterial attach=\"material\" color=\"black\" opacity={0.5} />\n    </mesh>\n  );\n};\n\nconst Ceiling = () => {\n  const { viewport } = useThree();\n  const [ref] = usePlane(() => ({\n    rotation: [Math.PI / 2, 0, 0],\n    position: [0, viewport.height / 2, 0],\n  }));\n\n  return (\n    <mesh ref={ref}>\n      <planeBufferGeometry attach=\"geometry\" args={[viewport.width, 2]} />\n      <meshPhongMaterial attach=\"material\" color=\"black\" opacity={0.5} />\n    </mesh>\n  );\n};\n\nconst Paddle = () => {\n  const [ref, api] = useBox(() => ({ args: [2, 0.5, 1] }));\n\n  useFrame((state) => {\n    api.position.set(\n      (state.mouse.x * state.viewport.width) / 2,\n      -state.viewport.height / 2 + 1,\n      0,\n    );\n    api.rotation.set(0, 0, (state.mouse.x * Math.PI) / 5);\n  });\n\n  return (\n    <mesh ref={ref}>\n      <boxBufferGeometry args={[2, 0.5, 1]} />\n      <meshStandardMaterial color=\"lightblue\" />\n    </mesh>\n  );\n};\n\nconst Enemy = ({ color, args = [2, 0.5, 1], setScore, ...props }) => {\n  const [ref, api] = useBox(() => ({\n    args,\n    ...props,\n    onCollide: () => {\n      api.position.set([0, 0, 0]);\n      setScore();\n    },\n  }));\n  return (\n    <mesh ref={ref}>\n      <boxBufferGeometry args={args} />\n      <meshStandardMaterial color={color} />\n    </mesh>\n  );\n};\n\nconst useScore = (startScore = 0) => {\n  const [score, setScore] = useState(startScore);\n  const incrementScore = () => setScore((score) => score + 1);\n  const resetScore = () => setScore(() => 0);\n  return [score, incrementScore, resetScore];\n};\n\nfunction App() {\n  const [score, incrementScore, resetScore] = useScore(0);\n\n  return (\n    <Canvas camera={{ position: [0, 0, 20], fov: 50 }}>\n      <ambientLight intensity={0.3} />\n      <pointLight position={[10, 10, 5]} />\n      <pointLight position={[-10, -10, -5]} />\n      <Physics\n        gravity={[0, -30, 0]}\n        defaultContactMaterial={{ restitution: 1.1 }}\n      >\n        <Wall />\n        <Wall2 />\n        <Ceiling />\n        <Ball resetScore={resetScore} />\n        <Paddle />\n        <Enemy color=\"orange\" position={[2, 1, 0]} setScore={incrementScore} />\n        <Enemy\n          color=\"hotpink\"\n          position={[-2, 3, 0]}\n          setScore={incrementScore}\n        />\n        <Html prepend distanceFactor={10}>\n          <div className=\"content\">{score}</div>\n        </Html>\n      </Physics>\n    </Canvas>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}